Nombre: Jose Buendía Polo						Curso: 1º DAM

Ciclo de vida del software

1. Define "Ciclo de vida del software".
El ciclo de vida del software describe el desarrollo de software, desde la fase inicial hasta la fase final.

2. Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas.
- Definición de objetivos: define la finalidad del proyecto y su papel en la estrategia global.
- Análisis de los requisitos y su viabilidad: recopila, examina y formula los requisitos del cliente y examina cualquier restricción que se pueda aplicar.
- Diseño general: requisitos generales de la arquitectura de la aplicación.
- Diseño en detalle: definición precisa de cada subconjunto de la aplicación.
- Programación (programación e implementación): implementación de un lenguaje de programación para crear las funciones definidas durante la etapa de diseño.
- Prueba de unidad: prueba individual de cada subconjunto de la aplicación para garantizar que se implementaron de acuerdo con las especificaciones.
- Integración: garantiza que los diferentes módulos se integren con la aplicación. Este es el propósito de la prueba de integración que está cuidadosamente documentada.
- Prueba beta (o validación): garantiza que el software cumple con las especificaciones originales.
- Documentación: sirve para documentar información necesaria para los usuarios del software y para desarrollos futuros.
- Implementación
- Mantenimiento: comprende todos los procedimientos correctivos (mantenimiento correctivo) y las actualizaciones secundarias del software (mantenimiento continuo).

3. Explica brevemente en qué consiste el modelo en cascada cuando hablamos de desarrollo de software.
El desarrollo en cascada es un procedimiento lineal que se caracteriza por dividir los procesos de desarrollo en sucesivas fases de proyecto.
1.	Análisis: planificación, análisis y especificación de los requisitos.
2.	Diseño: diseño y especificación del sistema.
3.	Implementación: programación y pruebas unitarias.
4.	Verificación: integración de sistemas, pruebas de sistema y de integración.
5.	Mantenimiento: entrega, mantenimiento y mejora.

4. Ventajas e inconvenientes del modelo en cascada.
Ventajas	
- Una estructura sencilla gracias a unas fases de proyecto claramente diferenciadas.	
- Buena documentación del proceso de desarrollo a través de unos hitos bien definidos
- Los costes y la carga de trabajo se pueden estimar al comenzar el proyecto.	
- Aquellos proyectos que se estructuran en base al modelo en cascada se pueden representar cronológicamente de forma sencilla.

Inconvenientes
- Por norma general, los proyectos más complejos o de varios niveles no permiten su división en fases de proyecto claramente diferenciadas.
- Poco margen para realizar ajustes a lo largo del proyecto debido a un cambio en las exigencias.
- El usuario final no se integra en el proceso de producción hasta que no termina la programación.
- En ocasiones, los fallos solo se detectan una vez finalizado el proceso de desarrollo.

5. ¿Qué se entiende por verificación? ¿Y por validación?
- Verificación: objetivo es asegurar que el software satisface por completo todos los requisitos esperados
- Validación: La validación de software es un proceso que demuestra a partir de documentos que el sistema cumple con las funciones de las cuales fue designado, de acuerdo con las especificaciones de los requisitos del usuario y con la garantía de seguridad y trazabilidad de informaciones.

6. Explica cómo funciona el modelo de desarrollo mediante creación de prototipos.
El prototipo debe ser construido en poco tiempo, usando los programas adecuados y no se debe utilizar muchos recursos.
El diseño rápido se centra en una representación de aquellos aspectos del software que serán visibles para el cliente o el usuario final. Este diseño conduce a la construcción de un prototipo, el cual es evaluado por el cliente para una retroalimentación; gracias a esta se refinan los requisitos del software que se desarrollará. La interacción ocurre cuando el prototipo se ajusta para satisfacer las necesidades del cliente. Esto permite que al mismo tiempo el desarrollador entienda mejor lo que se debe hacer y el cliente vea resultados a corto plazo.

7. ¿Qué cuatro principios rigen el desarrollo ágil expresados en el Manifiesto Ágil?
- Nuestra mayor prioridad es satisfacer al cliente mediante la entrega temprana y continua de software con valor.
- Aceptamos que los requisitos cambien, incluso en etapas tardías del desarrollo. Los procesos Ágiles aprovechan el cambio para proporcionar ventaja competitiva al cliente.
- Entregamos software funcional frecuentemente, entre dos semanas y dos meses, con preferencia al periodo de tiempo más corto posible.
- Los responsables de negocio y los desarrolladores trabajamos juntos de forma otidiana durante todo el proyecto.
- Los proyectos se desarrollan en torno a individuos motivados. Hay que darles el entorno y el apoyo que necesitan, y confiarles la ejecución del trabajo.
- El método más eficiente y efectivo de comunicar información al equipo de desarrollo y entre sus miembros es la conversación cara a cara.
- El software funcionando es la medida principal de progreso.
- Los procesos Ágiles promueven el desarrollo sostenible. Los promotores, desarrolladores y usuarios debemos ser capaces de mantener un ritmo constante de forma indefinida.
- La atención continua a la excelencia técnica y al buen diseño mejora la Agilidad.
- La simplicidad, o el arte de maximizar la cantidad de trabajo no realizado, es esencial.
- Las mejores arquitecturas, requisitos y diseños emergen de equipos auto-organizados.
- A intervalos regulares el equipo reflexiona sobre cómo ser más efectivo para a continuación ajustar y perfeccionar su comportamiento en consecuencia.

8. ¿Qué es una historia de usuario? Consulta el siguiente enlace:
Una historia de usuario es una representación de un requisito escrito en una o dos frases utilizando el lenguaje común del usuario. Las historias de usuario son utilizadas en las metodologías de desarrollo ágiles para la especificación de requisitos (acompañadas de las discusiones con los usuarios y las pruebas de validación)
    
9. Explica como funciona Scrum. Consulta los siguientes enlaces:
La metodología Scrum es un marco de trabajo o framework que se utiliza dentro de equipos que manejan proyectos complejos. Es decir, se trata de una metodología de trabajo ágil que tiene como finalidad la entrega de valor en períodos cortos de tiempo y para ello se basa en tres pilares: la transparencia, inspección y adaptación. Esto permite al cliente, junto con su equipo comercial, insertar el producto en el mercado pronto, rápido y empezar a obtener ventas. Las herramientas principales de Scrum son: product backlog y sprint backlog.

10. Define los siguientes términos:
- Product backlog: es el listado de tareas que engloba todo un proyecto. Cualquier cosa que debamos hacer debe estar en el product backlog y con un tiempo estimado por el equipo de desarrollo.
- Sprint backlog: Es el grupo de tareas del product backlog que el equipo de desarrollo elige en el sprint planning junto con el plan para poder desarrollarlas. Debe ser conocido por todo el equipo, para asegurarse de que el foco debe estar en este grupo de tareas. El sprint planning no cambia durante el sprint, solo se permite cambiar el plan para poder desarrollarlas.

11. En la terminología Scrum qué términos se utilizan como sinónimo de:
- Jefe de proyecto: Es el responsable de maximizar el valor del trabajo del equipo de desarrollo. La maximización del valor del trabajo viene de la mano de una buena gestión del Product Backlog, el cual explicaremos más adelante. El Product owner es el único perfil que habla constantemente con el cliente, lo que le obliga a tener muchos conocimientos sobre negocio.
- Cliente: Un cliente es una persona o entidad que compra los bienes y servicios que ofrece una empresa. De esta forma puede ir viendo en tiempo real el desarrollo del proyecto.
- Equipo de desarrollo: Son los encargados de realizar las tareas priorizadas por el Product Owner. Es un equipo multifuncional y auto-organizado. Son los únicos que estiman las tareas del product backlog, sin dejarse influenciar por nadie. Los equipos de desarrollo no tienen sub-equipos o especialistas. La finalidad de esto es transmitir la responsabilidad compartida si no se llegan a realizar todas las tareas de un sprint.

12. Haz un resumen de los requisitos para poder utilizar Scrum. Consulta el siguiente enlace:
- Los siguientes puntos son de especial importancia para la implantación de una gestión ágil de proyectos como Scrum:
- Cultura de empresa basada en trabajo en equipo, delegación, creatividad y mejora continua.
- Compromiso del cliente en la dirección de los resultados del proyecto, gestión del ROI y disponibilidad para poder colaborar.
- Compromiso de la Dirección de la organización para resolver problemas endémicos y realizar cambios organizativos, formando equipos autogestionados y multidisciplinares y fomentando una cultura de gestión basada en la colaboración y en la facilitación llevada a cabo por líderes al servicio del equipo.
- Compromiso conjunto y colaboración de los miembros del equipo.
- Relación entre proveedor y cliente basada en ganar-ganar, colaboración y transparencia.
- Facilidad para realizar cambios en el proyecto.
- Tamaño de cada equipo entre 5 y 9 personas (con técnicas específicas de planificación y coordinación cuando varios equipos trabajan en el mismo proyecto).
- Equipo trabajando en un mismo espacio común para maximizar la comunicación.
- Dedicación del equipo a tiempo completo.
- Estabilidad de los miembros del equipo

